,coordinates,id,title,description,cwe,cve,severity,epss.cve,epss.epss,epss.percentile,epss.date,componentname,sbom_name
0,pkg:nuget/Microsoft.Rest.ClientRuntime@2.3.23,CVE-2022-26907,Azure SDK for .NET Information Disclosure Vulnerability.,Azure SDK for .NET Information Disclosure Vulnerability via undisclosed methods relating to lack of sanitization of exception messages.,CWE-532,CVE-2022-26907,MODERATE,CVE-2022-26907,0.005440000,0.747700000,2023-11-22,Microsoft.Rest.ClientRuntime,Corvus.AzureFunctionsKeepAlive.sbom-20230731145443527.json
1,pkg:nuget/Microsoft.Rest.ClientRuntime@2.3.23,CVE-2022-26907,Azure SDK for .NET Information Disclosure Vulnerability.,Azure SDK for .NET Information Disclosure Vulnerability via undisclosed methods relating to lack of sanitization of exception messages.,CWE-532,CVE-2022-26907,MODERATE,CVE-2022-26907,0.005440000,0.747700000,2023-11-22,Microsoft.Rest.ClientRuntime,Corvus.AzureFunctionsKeepAlive.sbom-20230925023013487.json
2,pkg:nuget/Microsoft.Rest.ClientRuntime@2.3.23,CVE-2022-26907,Azure SDK for .NET Information Disclosure Vulnerability.,Azure SDK for .NET Information Disclosure Vulnerability via undisclosed methods relating to lack of sanitization of exception messages.,CWE-532,CVE-2022-26907,MODERATE,CVE-2022-26907,0.005440000,0.747700000,2023-11-22,Microsoft.Rest.ClientRuntime,Corvus.AzureFunctionsKeepAlive.sbom-20230926005207504.json
3,pkg:nuget/Microsoft.Rest.ClientRuntime@2.3.23,CVE-2022-26907,Azure SDK for .NET Information Disclosure Vulnerability.,Azure SDK for .NET Information Disclosure Vulnerability via undisclosed methods relating to lack of sanitization of exception messages.,CWE-532,CVE-2022-26907,MODERATE,CVE-2022-26907,0.005440000,0.747700000,2023-11-22,Microsoft.Rest.ClientRuntime,Marain.Claims.sbom-20230925152701828.json
4,pkg:nuget/Microsoft.Rest.ClientRuntime@2.3.23,CVE-2022-26907,Azure SDK for .NET Information Disclosure Vulnerability.,Azure SDK for .NET Information Disclosure Vulnerability via undisclosed methods relating to lack of sanitization of exception messages.,CWE-532,CVE-2022-26907,MODERATE,CVE-2022-26907,0.005440000,0.747700000,2023-11-22,Microsoft.Rest.ClientRuntime,Marain.Claims.sbom-20231002161804330.json
5,pkg:nuget/Microsoft.Rest.ClientRuntime@2.3.23,CVE-2022-26907,Azure SDK for .NET Information Disclosure Vulnerability.,Azure SDK for .NET Information Disclosure Vulnerability via undisclosed methods relating to lack of sanitization of exception messages.,CWE-532,CVE-2022-26907,MODERATE,CVE-2022-26907,0.005440000,0.747700000,2023-11-22,Microsoft.Rest.ClientRuntime,Marain.Claims.sbom-20231002164058654.json
6,pkg:nuget/Microsoft.Rest.ClientRuntime@2.3.23,CVE-2022-26907,Azure SDK for .NET Information Disclosure Vulnerability.,Azure SDK for .NET Information Disclosure Vulnerability via undisclosed methods relating to lack of sanitization of exception messages.,CWE-532,CVE-2022-26907,MODERATE,CVE-2022-26907,0.005440000,0.747700000,2023-11-22,Microsoft.Rest.ClientRuntime,Marain.Operations.sbom-20230925121312215.json
7,pkg:nuget/Microsoft.Rest.ClientRuntime@2.3.23,CVE-2022-26907,Azure SDK for .NET Information Disclosure Vulnerability.,Azure SDK for .NET Information Disclosure Vulnerability via undisclosed methods relating to lack of sanitization of exception messages.,CWE-532,CVE-2022-26907,MODERATE,CVE-2022-26907,0.005440000,0.747700000,2023-11-22,Microsoft.Rest.ClientRuntime,Marain.Operations.sbom-20230925121354442.json
8,pkg:nuget/Microsoft.Rest.ClientRuntime@2.3.23,CVE-2022-26907,Azure SDK for .NET Information Disclosure Vulnerability.,Azure SDK for .NET Information Disclosure Vulnerability via undisclosed methods relating to lack of sanitization of exception messages.,CWE-532,CVE-2022-26907,MODERATE,CVE-2022-26907,0.005440000,0.747700000,2023-11-22,Microsoft.Rest.ClientRuntime,Marain.Operations.sbom-20230927022336918.json
9,pkg:nuget/Microsoft.Rest.ClientRuntime@2.3.23,CVE-2022-26907,Azure SDK for .NET Information Disclosure Vulnerability.,Azure SDK for .NET Information Disclosure Vulnerability via undisclosed methods relating to lack of sanitization of exception messages.,CWE-532,CVE-2022-26907,MODERATE,CVE-2022-26907,0.005440000,0.747700000,2023-11-22,Microsoft.Rest.ClientRuntime,Marain.Tenancy.sbom-20230922163414724.json
10,pkg:nuget/Microsoft.Rest.ClientRuntime@2.3.23,CVE-2022-26907,Azure SDK for .NET Information Disclosure Vulnerability.,Azure SDK for .NET Information Disclosure Vulnerability via undisclosed methods relating to lack of sanitization of exception messages.,CWE-532,CVE-2022-26907,MODERATE,CVE-2022-26907,0.005440000,0.747700000,2023-11-22,Microsoft.Rest.ClientRuntime,Marain.Tenancy.sbom-20230925022435177.json
11,pkg:nuget/Microsoft.Rest.ClientRuntime@2.3.23,CVE-2022-26907,Azure SDK for .NET Information Disclosure Vulnerability.,Azure SDK for .NET Information Disclosure Vulnerability via undisclosed methods relating to lack of sanitization of exception messages.,CWE-532,CVE-2022-26907,MODERATE,CVE-2022-26907,0.005440000,0.747700000,2023-11-22,Microsoft.Rest.ClientRuntime,Marain.Tenancy.sbom-20230925024911502.json
12,pkg:nuget/Microsoft.Rest.ClientRuntime@2.3.23,CVE-2022-26907,Azure SDK for .NET Information Disclosure Vulnerability.,Azure SDK for .NET Information Disclosure Vulnerability via undisclosed methods relating to lack of sanitization of exception messages.,CWE-532,CVE-2022-26907,MODERATE,CVE-2022-26907,0.005440000,0.747700000,2023-11-22,Microsoft.Rest.ClientRuntime,Marain.TenantManagement.sbom-20230926083515409.json
13,pkg:nuget/Microsoft.Rest.ClientRuntime@2.3.23,CVE-2022-26907,Azure SDK for .NET Information Disclosure Vulnerability.,Azure SDK for .NET Information Disclosure Vulnerability via undisclosed methods relating to lack of sanitization of exception messages.,CWE-532,CVE-2022-26907,MODERATE,CVE-2022-26907,0.005440000,0.747700000,2023-11-22,Microsoft.Rest.ClientRuntime,Marain.TenantManagement.sbom-20230927021739482.json
14,pkg:nuget/Microsoft.Rest.ClientRuntime@2.3.23,CVE-2022-26907,Azure SDK for .NET Information Disclosure Vulnerability.,Azure SDK for .NET Information Disclosure Vulnerability via undisclosed methods relating to lack of sanitization of exception messages.,CWE-532,CVE-2022-26907,MODERATE,CVE-2022-26907,0.005440000,0.747700000,2023-11-22,Microsoft.Rest.ClientRuntime,Marain.TenantManagement.sbom-20230927082242823.json
15,pkg:nuget/Microsoft.Rest.ClientRuntime@2.3.23,CVE-2022-26907,Azure SDK for .NET Information Disclosure Vulnerability.,Azure SDK for .NET Information Disclosure Vulnerability via undisclosed methods relating to lack of sanitization of exception messages.,CWE-532,CVE-2022-26907,MODERATE,CVE-2022-26907,0.005440000,0.747700000,2023-11-22,Microsoft.Rest.ClientRuntime,Marain.UserNotifications.sbom-20230313115752967.json
16,pkg:nuget/Microsoft.Rest.ClientRuntime@2.3.23,CVE-2022-26907,Azure SDK for .NET Information Disclosure Vulnerability.,Azure SDK for .NET Information Disclosure Vulnerability via undisclosed methods relating to lack of sanitization of exception messages.,CWE-532,CVE-2022-26907,MODERATE,CVE-2022-26907,0.005440000,0.747700000,2023-11-22,Microsoft.Rest.ClientRuntime,Marain.UserNotifications.sbom-20230313122434134.json
17,pkg:nuget/Microsoft.Rest.ClientRuntime@2.3.23,CVE-2022-26907,Azure SDK for .NET Information Disclosure Vulnerability.,Azure SDK for .NET Information Disclosure Vulnerability via undisclosed methods relating to lack of sanitization of exception messages.,CWE-532,CVE-2022-26907,MODERATE,CVE-2022-26907,0.005440000,0.747700000,2023-11-22,Microsoft.Rest.ClientRuntime,Marain.UserNotifications.sbom-20230714140818507.json
18,pkg:nuget/Microsoft.Rest.ClientRuntime@2.3.23,CVE-2022-26907,Azure SDK for .NET Information Disclosure Vulnerability.,Azure SDK for .NET Information Disclosure Vulnerability via undisclosed methods relating to lack of sanitization of exception messages.,CWE-532,CVE-2022-26907,MODERATE,CVE-2022-26907,0.005440000,0.747700000,2023-11-22,Microsoft.Rest.ClientRuntime,Marain.Workflow.sbom-20230913024351535.json
19,pkg:nuget/Microsoft.Rest.ClientRuntime@2.3.23,CVE-2022-26907,Azure SDK for .NET Information Disclosure Vulnerability.,Azure SDK for .NET Information Disclosure Vulnerability via undisclosed methods relating to lack of sanitization of exception messages.,CWE-532,CVE-2022-26907,MODERATE,CVE-2022-26907,0.005440000,0.747700000,2023-11-22,Microsoft.Rest.ClientRuntime,Marain.Workflow.sbom-20231018030131154.json
20,pkg:nuget/Microsoft.Rest.ClientRuntime@2.3.23,CVE-2022-26907,Azure SDK for .NET Information Disclosure Vulnerability.,Azure SDK for .NET Information Disclosure Vulnerability via undisclosed methods relating to lack of sanitization of exception messages.,CWE-532,CVE-2022-26907,MODERATE,CVE-2022-26907,0.005440000,0.747700000,2023-11-22,Microsoft.Rest.ClientRuntime,Marain.Workflow.sbom-20231020021055256.json
21,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.AzureFunctionsKeepAlive.sbom-20230731145443527.json
22,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.AzureFunctionsKeepAlive.sbom-20230925023013487.json
23,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.AzureFunctionsKeepAlive.sbom-20230926005207504.json
24,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.ContentHandling.sbom-20230803021854521.json
25,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.ContentHandling.sbom-20230927021312061.json
26,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.ContentHandling.sbom-20230927022958777.json
27,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.System.Text.Json.sbom-20230714141727393.json
28,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.System.Text.Json.sbom-20230731141202223.json
29,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.System.Text.Json.sbom-20230807133651423.json
30,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.sbom-20230925124952113.json
31,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.sbom-20230925125539544.json
32,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.sbom-20230927021217870.json
33,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Globbing.sbom-20230925021641016.json
34,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Globbing.sbom-20230927021755450.json
35,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Globbing.sbom-20230927022310790.json
36,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Json.sbom-20230802021609249.json
37,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Json.sbom-20230803021801566.json
38,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Json.sbom-20230925021331846.json
39,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.JsonSchema.sbom-20231018071822430.json
40,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.JsonSchema.sbom-20231024080024899.json
41,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.JsonSchema.sbom-20231025075047582.json
42,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Leasing.sbom-20231007124310090.json
43,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Leasing.sbom-20231018133339741.json
44,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Leasing.sbom-20231018133701514.json
45,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Monitoring.sbom-20230925021343358.json
46,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Monitoring.sbom-20230927021528451.json
47,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Monitoring.sbom-20230927021709610.json
48,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Retry.sbom-20230802021549215.json
49,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Retry.sbom-20230925125954595.json
50,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Retry.sbom-20230925130521136.json
51,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.UriTemplates.sbom-20231013155844800.json
52,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.UriTemplates.sbom-20231024155652770.json
53,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.UriTemplates.sbom-20231026155117317.json
54,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Claims.sbom-20230925152701828.json
55,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Claims.sbom-20231002161804330.json
56,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Claims.sbom-20231002164058654.json
57,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Operations.sbom-20230925121312215.json
58,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Operations.sbom-20230925121354442.json
59,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Operations.sbom-20230927022336918.json
60,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Tenancy.sbom-20230922163414724.json
61,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Tenancy.sbom-20230925022435177.json
62,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Tenancy.sbom-20230925024911502.json
63,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.TenantManagement.sbom-20230926083515409.json
64,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.TenantManagement.sbom-20230927021739482.json
65,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.TenantManagement.sbom-20230927082242823.json
66,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.UserNotifications.sbom-20230313115752967.json
67,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.UserNotifications.sbom-20230313122434134.json
68,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.UserNotifications.sbom-20230714140818507.json
69,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Workflow.sbom-20230913024351535.json
70,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Workflow.sbom-20231018030131154.json
71,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Workflow.sbom-20231020021055256.json
72,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Menes.sbom-20230927023952519.json
73,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Menes.sbom-20230927081724280.json
74,pkg:nuget/Newtonsoft.Json@11.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Menes.sbom-20231019081033177.json
75,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.AzureFunctionsKeepAlive.sbom-20230731145443527.json
76,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.AzureFunctionsKeepAlive.sbom-20230925023013487.json
77,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.AzureFunctionsKeepAlive.sbom-20230926005207504.json
78,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Extensions.System.Text.Json.sbom-20230714141727393.json
79,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Extensions.System.Text.Json.sbom-20230731141202223.json
80,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Extensions.System.Text.Json.sbom-20230807133651423.json
81,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Globbing.sbom-20230925021641016.json
82,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Globbing.sbom-20230927021755450.json
83,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Globbing.sbom-20230927022310790.json
84,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.JsonSchema.sbom-20231018071822430.json
85,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.JsonSchema.sbom-20231024080024899.json
86,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.JsonSchema.sbom-20231025075047582.json
87,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Leasing.sbom-20231007124310090.json
88,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Leasing.sbom-20231018133339741.json
89,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Leasing.sbom-20231018133701514.json
90,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Monitoring.sbom-20230925021343358.json
91,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Monitoring.sbom-20230927021528451.json
92,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Monitoring.sbom-20230927021709610.json
93,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.UriTemplates.sbom-20231013155844800.json
94,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.UriTemplates.sbom-20231024155652770.json
95,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.UriTemplates.sbom-20231026155117317.json
96,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Claims.sbom-20230925152701828.json
97,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Claims.sbom-20231002161804330.json
98,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Claims.sbom-20231002164058654.json
99,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Operations.sbom-20230925121312215.json
100,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Operations.sbom-20230925121354442.json
101,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Operations.sbom-20230927022336918.json
102,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Tenancy.sbom-20230922163414724.json
103,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Tenancy.sbom-20230925022435177.json
104,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Tenancy.sbom-20230925024911502.json
105,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.TenantManagement.sbom-20230926083515409.json
106,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.TenantManagement.sbom-20230927021739482.json
107,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.TenantManagement.sbom-20230927082242823.json
108,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.UserNotifications.sbom-20230313115752967.json
109,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.UserNotifications.sbom-20230313122434134.json
110,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.UserNotifications.sbom-20230714140818507.json
111,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Workflow.sbom-20230913024351535.json
112,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Workflow.sbom-20231018030131154.json
113,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Workflow.sbom-20231020021055256.json
114,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Menes.sbom-20230927023952519.json
115,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Menes.sbom-20230927081724280.json
116,pkg:nuget/System.Text.Encodings.Web@4.5.0,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Menes.sbom-20231019081033177.json
117,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.AzureFunctionsKeepAlive.sbom-20230731145443527.json
118,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.AzureFunctionsKeepAlive.sbom-20230925023013487.json
119,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.AzureFunctionsKeepAlive.sbom-20230926005207504.json
120,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.ContentHandling.sbom-20230803021854521.json
121,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.ContentHandling.sbom-20230927021312061.json
122,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.ContentHandling.sbom-20230927022958777.json
123,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.Extensions.System.Text.Json.sbom-20230714141727393.json
124,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.Extensions.System.Text.Json.sbom-20230731141202223.json
125,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.Extensions.System.Text.Json.sbom-20230807133651423.json
126,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.Extensions.sbom-20230925124952113.json
127,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.Extensions.sbom-20230925125539544.json
128,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.Extensions.sbom-20230927021217870.json
129,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.Globbing.sbom-20230925021641016.json
130,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.Globbing.sbom-20230927021755450.json
131,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.Globbing.sbom-20230927022310790.json
132,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.Json.sbom-20230802021609249.json
133,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.Json.sbom-20230803021801566.json
134,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.Json.sbom-20230925021331846.json
135,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.Leasing.sbom-20231007124310090.json
136,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.Leasing.sbom-20231018133339741.json
137,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.Leasing.sbom-20231018133701514.json
138,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.Monitoring.sbom-20230925021343358.json
139,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.Monitoring.sbom-20230927021528451.json
140,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.Monitoring.sbom-20230927021709610.json
141,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.Retry.sbom-20230802021549215.json
142,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.Retry.sbom-20230925125954595.json
143,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.Retry.sbom-20230925130521136.json
144,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.UriTemplates.sbom-20231013155844800.json
145,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.UriTemplates.sbom-20231024155652770.json
146,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Corvus.UriTemplates.sbom-20231026155117317.json
147,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Marain.Claims.sbom-20230925152701828.json
148,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Marain.Claims.sbom-20231002161804330.json
149,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Marain.Claims.sbom-20231002164058654.json
150,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Marain.Operations.sbom-20230925121312215.json
151,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Marain.Operations.sbom-20230925121354442.json
152,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Marain.Operations.sbom-20230927022336918.json
153,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Marain.Tenancy.sbom-20230922163414724.json
154,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Marain.Tenancy.sbom-20230925022435177.json
155,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Marain.Tenancy.sbom-20230925024911502.json
156,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Marain.TenantManagement.sbom-20230926083515409.json
157,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Marain.TenantManagement.sbom-20230927021739482.json
158,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Marain.TenantManagement.sbom-20230927082242823.json
159,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Marain.UserNotifications.sbom-20230313115752967.json
160,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Marain.UserNotifications.sbom-20230313122434134.json
161,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Marain.UserNotifications.sbom-20230714140818507.json
162,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Marain.Workflow.sbom-20230913024351535.json
163,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Marain.Workflow.sbom-20231018030131154.json
164,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Marain.Workflow.sbom-20231020021055256.json
165,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Menes.sbom-20230927023952519.json
166,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Menes.sbom-20230927081724280.json
167,pkg:nuget/System.Text.RegularExpressions@4.3.0,CVE-2019-0820,Regular Expression Denial of Service in System.Text.RegularExpressions,"A denial of service vulnerability exists when .NET Framework and .NET Core improperly process RegEx strings, aka '.NET Framework and .NET Core Denial of Service Vulnerability'. This CVE ID is unique from CVE-2019-0980, CVE-2019-0981.","CWE-1333,CWE-400",CVE-2019-0820,HIGH,CVE-2019-0820,0.001590000,0.523850000,2023-11-22,System.Text.RegularExpressions,Menes.sbom-20231019081033177.json
168,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.AzureFunctionsKeepAlive.sbom-20230731145443527.json
169,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.AzureFunctionsKeepAlive.sbom-20230925023013487.json
170,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.AzureFunctionsKeepAlive.sbom-20230926005207504.json
171,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.ContentHandling.sbom-20230803021854521.json
172,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.ContentHandling.sbom-20230927021312061.json
173,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.ContentHandling.sbom-20230927022958777.json
174,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.System.Text.Json.sbom-20230714141727393.json
175,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.System.Text.Json.sbom-20230731141202223.json
176,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.System.Text.Json.sbom-20230807133651423.json
177,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.sbom-20230925124952113.json
178,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.sbom-20230925125539544.json
179,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.sbom-20230927021217870.json
180,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Globbing.sbom-20230925021641016.json
181,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Globbing.sbom-20230927021755450.json
182,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Globbing.sbom-20230927022310790.json
183,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Json.sbom-20230802021609249.json
184,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Json.sbom-20230803021801566.json
185,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Json.sbom-20230925021331846.json
186,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.JsonSchema.sbom-20231018071822430.json
187,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.JsonSchema.sbom-20231024080024899.json
188,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.JsonSchema.sbom-20231025075047582.json
189,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Leasing.sbom-20231007124310090.json
190,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Leasing.sbom-20231018133339741.json
191,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Leasing.sbom-20231018133701514.json
192,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Monitoring.sbom-20230925021343358.json
193,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Monitoring.sbom-20230927021528451.json
194,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Monitoring.sbom-20230927021709610.json
195,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Retry.sbom-20230802021549215.json
196,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Retry.sbom-20230925125954595.json
197,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Retry.sbom-20230925130521136.json
198,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.UriTemplates.sbom-20231013155844800.json
199,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.UriTemplates.sbom-20231024155652770.json
200,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.UriTemplates.sbom-20231026155117317.json
201,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Claims.sbom-20230925152701828.json
202,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Claims.sbom-20231002161804330.json
203,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Claims.sbom-20231002164058654.json
204,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Operations.sbom-20230925121312215.json
205,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Operations.sbom-20230925121354442.json
206,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Operations.sbom-20230927022336918.json
207,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Tenancy.sbom-20230922163414724.json
208,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Tenancy.sbom-20230925022435177.json
209,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Tenancy.sbom-20230925024911502.json
210,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.TenantManagement.sbom-20230926083515409.json
211,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.TenantManagement.sbom-20230927021739482.json
212,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.TenantManagement.sbom-20230927082242823.json
213,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.UserNotifications.sbom-20230313115752967.json
214,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.UserNotifications.sbom-20230313122434134.json
215,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.UserNotifications.sbom-20230714140818507.json
216,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Workflow.sbom-20230913024351535.json
217,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Workflow.sbom-20231018030131154.json
218,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Workflow.sbom-20231020021055256.json
219,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Menes.sbom-20230927023952519.json
220,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Menes.sbom-20230927081724280.json
221,pkg:nuget/Newtonsoft.Json@9.0.1,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Menes.sbom-20231019081033177.json
222,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.AzureFunctionsKeepAlive.sbom-20230731145443527.json
223,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.AzureFunctionsKeepAlive.sbom-20230925023013487.json
224,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.AzureFunctionsKeepAlive.sbom-20230926005207504.json
225,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Extensions.System.Text.Json.sbom-20230714141727393.json
226,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Extensions.System.Text.Json.sbom-20230731141202223.json
227,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Extensions.System.Text.Json.sbom-20230807133651423.json
228,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Globbing.sbom-20230925021641016.json
229,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Globbing.sbom-20230927021755450.json
230,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Globbing.sbom-20230927022310790.json
231,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.JsonSchema.sbom-20231018071822430.json
232,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.JsonSchema.sbom-20231024080024899.json
233,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.JsonSchema.sbom-20231025075047582.json
234,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Leasing.sbom-20231007124310090.json
235,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Leasing.sbom-20231018133339741.json
236,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Leasing.sbom-20231018133701514.json
237,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Monitoring.sbom-20230925021343358.json
238,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Monitoring.sbom-20230927021528451.json
239,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.Monitoring.sbom-20230927021709610.json
240,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.UriTemplates.sbom-20231013155844800.json
241,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.UriTemplates.sbom-20231024155652770.json
242,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Corvus.UriTemplates.sbom-20231026155117317.json
243,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Claims.sbom-20230925152701828.json
244,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Claims.sbom-20231002161804330.json
245,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Claims.sbom-20231002164058654.json
246,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Operations.sbom-20230925121312215.json
247,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Operations.sbom-20230925121354442.json
248,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Operations.sbom-20230927022336918.json
249,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Tenancy.sbom-20230922163414724.json
250,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Tenancy.sbom-20230925022435177.json
251,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Tenancy.sbom-20230925024911502.json
252,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.TenantManagement.sbom-20230926083515409.json
253,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.TenantManagement.sbom-20230927021739482.json
254,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.TenantManagement.sbom-20230927082242823.json
255,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.UserNotifications.sbom-20230313115752967.json
256,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.UserNotifications.sbom-20230313122434134.json
257,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.UserNotifications.sbom-20230714140818507.json
258,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Workflow.sbom-20230913024351535.json
259,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Workflow.sbom-20231018030131154.json
260,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Marain.Workflow.sbom-20231020021055256.json
261,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Menes.sbom-20230927023952519.json
262,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Menes.sbom-20230927081724280.json
263,pkg:nuget/System.Text.Encodings.Web@4.7.1,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",.NET Core Remote Code Execution Vulnerability,".NET Core Remote Code Execution Vulnerability This CVE ID is unique from CVE-2021-24112.

### Executive summary

Microsoft is releasing this security advisory to provide information about a vulnerability in .NET 5.0, .NET Core 3.1, and .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.

A remote code execution vulnerability exists in .NET 5 and .NET Core due to how text encoding is performed.

### Discussion

Discussion for this issue can be found at dotnet/runtime#49377

### Mitigation factors

Microsoft has not identified any mitigating factors for this vulnerability.

### Affected software

The vulnerable package is `System.Text.Encodings.Web` . Upgrading your package and redeploying your app should be sufficient to address this vulnerability.

Vulnerable package versions:

Any .NET 5, .NET Core, or .NET Framework based application that uses the System.Text.Encodings.Web package with a vulnerable version listed below.

Package Name | Vulnerable Versions | Secure Versions
-|-|-
System.Text.Encodings.Web | 4.0.0 - 4.5.0 | 4.5.1
System.Text.Encodings.Web |  4.6.0-4.7.1 | 4.7.2
System.Text.Encodings.Web | 5.0.0 |  5.0.1


Please validate that each of the .NET versions you are using is in support. Security updates are only provided for supported .NET versions.

",,"BIT-2021-26701,BIT-dotnet-2021-26701,BIT-dotnet-sdk-2021-26701,CVE-2021-26701",CRITICAL,,,,,System.Text.Encodings.Web,Menes.sbom-20231019081033177.json
264,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.AzureFunctionsKeepAlive.sbom-20230731145443527.json
265,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.AzureFunctionsKeepAlive.sbom-20230925023013487.json
266,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.AzureFunctionsKeepAlive.sbom-20230926005207504.json
267,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.ContentHandling.sbom-20230803021854521.json
268,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.ContentHandling.sbom-20230927021312061.json
269,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.ContentHandling.sbom-20230927022958777.json
270,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.System.Text.Json.sbom-20230714141727393.json
271,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.System.Text.Json.sbom-20230731141202223.json
272,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.System.Text.Json.sbom-20230807133651423.json
273,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.sbom-20230925124952113.json
274,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.sbom-20230925125539544.json
275,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.sbom-20230927021217870.json
276,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Globbing.sbom-20230925021641016.json
277,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Globbing.sbom-20230927021755450.json
278,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Globbing.sbom-20230927022310790.json
279,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Json.sbom-20230802021609249.json
280,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Json.sbom-20230803021801566.json
281,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Json.sbom-20230925021331846.json
282,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.JsonSchema.sbom-20231018071822430.json
283,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.JsonSchema.sbom-20231024080024899.json
284,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.JsonSchema.sbom-20231025075047582.json
285,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Leasing.sbom-20231007124310090.json
286,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Leasing.sbom-20231018133339741.json
287,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Leasing.sbom-20231018133701514.json
288,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Monitoring.sbom-20230925021343358.json
289,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Monitoring.sbom-20230927021528451.json
290,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Monitoring.sbom-20230927021709610.json
291,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Retry.sbom-20230802021549215.json
292,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Retry.sbom-20230925125954595.json
293,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Retry.sbom-20230925130521136.json
294,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.UriTemplates.sbom-20231013155844800.json
295,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.UriTemplates.sbom-20231024155652770.json
296,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.UriTemplates.sbom-20231026155117317.json
297,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Claims.sbom-20230925152701828.json
298,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Claims.sbom-20231002161804330.json
299,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Claims.sbom-20231002164058654.json
300,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Operations.sbom-20230925121312215.json
301,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Operations.sbom-20230925121354442.json
302,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Operations.sbom-20230927022336918.json
303,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Tenancy.sbom-20230922163414724.json
304,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Tenancy.sbom-20230925022435177.json
305,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Tenancy.sbom-20230925024911502.json
306,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.TenantManagement.sbom-20230926083515409.json
307,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.TenantManagement.sbom-20230927021739482.json
308,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.TenantManagement.sbom-20230927082242823.json
309,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.UserNotifications.sbom-20230313115752967.json
310,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.UserNotifications.sbom-20230313122434134.json
311,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.UserNotifications.sbom-20230714140818507.json
312,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Workflow.sbom-20230913024351535.json
313,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Workflow.sbom-20231018030131154.json
314,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Workflow.sbom-20231020021055256.json
315,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Menes.sbom-20230927023952519.json
316,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Menes.sbom-20230927081724280.json
317,pkg:nuget/Newtonsoft.Json@10.0.2,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Menes.sbom-20231019081033177.json
318,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.AzureFunctionsKeepAlive.sbom-20230731145443527.json
319,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.AzureFunctionsKeepAlive.sbom-20230925023013487.json
320,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.AzureFunctionsKeepAlive.sbom-20230926005207504.json
321,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.ContentHandling.sbom-20230803021854521.json
322,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.ContentHandling.sbom-20230927021312061.json
323,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.ContentHandling.sbom-20230927022958777.json
324,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Extensions.System.Text.Json.sbom-20230714141727393.json
325,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Extensions.System.Text.Json.sbom-20230731141202223.json
326,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Extensions.System.Text.Json.sbom-20230807133651423.json
327,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Extensions.sbom-20230925124952113.json
328,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Extensions.sbom-20230925125539544.json
329,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Extensions.sbom-20230927021217870.json
330,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Globbing.sbom-20230925021641016.json
331,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Globbing.sbom-20230927021755450.json
332,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Globbing.sbom-20230927022310790.json
333,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Json.sbom-20230802021609249.json
334,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Json.sbom-20230803021801566.json
335,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Json.sbom-20230925021331846.json
336,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.JsonSchema.sbom-20231018071822430.json
337,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.JsonSchema.sbom-20231024080024899.json
338,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.JsonSchema.sbom-20231025075047582.json
339,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Leasing.sbom-20231007124310090.json
340,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Leasing.sbom-20231018133339741.json
341,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Leasing.sbom-20231018133701514.json
342,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Monitoring.sbom-20230925021343358.json
343,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Monitoring.sbom-20230927021528451.json
344,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Monitoring.sbom-20230927021709610.json
345,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Retry.sbom-20230802021549215.json
346,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Retry.sbom-20230925125954595.json
347,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Retry.sbom-20230925130521136.json
348,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.UriTemplates.sbom-20231013155844800.json
349,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.UriTemplates.sbom-20231024155652770.json
350,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.UriTemplates.sbom-20231026155117317.json
351,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Claims.sbom-20230925152701828.json
352,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Claims.sbom-20231002161804330.json
353,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Claims.sbom-20231002164058654.json
354,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Operations.sbom-20230925121312215.json
355,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Operations.sbom-20230925121354442.json
356,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Operations.sbom-20230927022336918.json
357,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Tenancy.sbom-20230922163414724.json
358,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Tenancy.sbom-20230925022435177.json
359,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Tenancy.sbom-20230925024911502.json
360,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.TenantManagement.sbom-20230926083515409.json
361,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.TenantManagement.sbom-20230927021739482.json
362,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.TenantManagement.sbom-20230927082242823.json
363,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.UserNotifications.sbom-20230313115752967.json
364,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.UserNotifications.sbom-20230313122434134.json
365,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.UserNotifications.sbom-20230714140818507.json
366,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Workflow.sbom-20230913024351535.json
367,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Workflow.sbom-20231018030131154.json
368,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Workflow.sbom-20231020021055256.json
369,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Menes.sbom-20230927023952519.json
370,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Menes.sbom-20230927081724280.json
371,pkg:nuget/System.Net.Http@4.3.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Menes.sbom-20231019081033177.json
372,pkg:nuget/Azure.Identity@1.8.2,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Corvus.Leasing.sbom-20231018133339741.json
373,pkg:nuget/Azure.Identity@1.8.2,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Corvus.Leasing.sbom-20231018133701514.json
374,pkg:nuget/Azure.Identity@1.8.2,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Claims.sbom-20230925152701828.json
375,pkg:nuget/Azure.Identity@1.8.2,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Claims.sbom-20231002161804330.json
376,pkg:nuget/Azure.Identity@1.8.2,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Claims.sbom-20231002164058654.json
377,pkg:nuget/Azure.Identity@1.8.2,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Operations.sbom-20230925121312215.json
378,pkg:nuget/Azure.Identity@1.8.2,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Operations.sbom-20230925121354442.json
379,pkg:nuget/Azure.Identity@1.8.2,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Operations.sbom-20230927022336918.json
380,pkg:nuget/Azure.Identity@1.8.2,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Tenancy.sbom-20230922163414724.json
381,pkg:nuget/Azure.Identity@1.8.2,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Tenancy.sbom-20230925022435177.json
382,pkg:nuget/Azure.Identity@1.8.2,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Tenancy.sbom-20230925024911502.json
383,pkg:nuget/Azure.Identity@1.8.2,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.TenantManagement.sbom-20230926083515409.json
384,pkg:nuget/Azure.Identity@1.8.2,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.TenantManagement.sbom-20230927021739482.json
385,pkg:nuget/Azure.Identity@1.8.2,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.TenantManagement.sbom-20230927082242823.json
386,pkg:nuget/Azure.Identity@1.8.2,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.UserNotifications.sbom-20230313115752967.json
387,pkg:nuget/Azure.Identity@1.8.2,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.UserNotifications.sbom-20230313122434134.json
388,pkg:nuget/Azure.Identity@1.8.2,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.UserNotifications.sbom-20230714140818507.json
389,pkg:nuget/Azure.Identity@1.8.2,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Workflow.sbom-20230913024351535.json
390,pkg:nuget/Azure.Identity@1.8.2,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Workflow.sbom-20231018030131154.json
391,pkg:nuget/Azure.Identity@1.8.2,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Workflow.sbom-20231020021055256.json
392,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.AzureFunctionsKeepAlive.sbom-20230731145443527.json
393,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.AzureFunctionsKeepAlive.sbom-20230925023013487.json
394,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.AzureFunctionsKeepAlive.sbom-20230926005207504.json
395,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.ContentHandling.sbom-20230803021854521.json
396,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.ContentHandling.sbom-20230927021312061.json
397,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.ContentHandling.sbom-20230927022958777.json
398,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Extensions.System.Text.Json.sbom-20230714141727393.json
399,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Extensions.System.Text.Json.sbom-20230731141202223.json
400,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Extensions.System.Text.Json.sbom-20230807133651423.json
401,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Extensions.sbom-20230925124952113.json
402,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Extensions.sbom-20230925125539544.json
403,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Extensions.sbom-20230927021217870.json
404,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Globbing.sbom-20230925021641016.json
405,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Globbing.sbom-20230927021755450.json
406,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Globbing.sbom-20230927022310790.json
407,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Json.sbom-20230802021609249.json
408,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Json.sbom-20230803021801566.json
409,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Json.sbom-20230925021331846.json
410,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.JsonSchema.sbom-20231018071822430.json
411,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.JsonSchema.sbom-20231024080024899.json
412,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.JsonSchema.sbom-20231025075047582.json
413,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Leasing.sbom-20231007124310090.json
414,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Leasing.sbom-20231018133339741.json
415,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Leasing.sbom-20231018133701514.json
416,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Monitoring.sbom-20230925021343358.json
417,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Monitoring.sbom-20230927021528451.json
418,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Monitoring.sbom-20230927021709610.json
419,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Retry.sbom-20230802021549215.json
420,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Retry.sbom-20230925125954595.json
421,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.Retry.sbom-20230925130521136.json
422,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.UriTemplates.sbom-20231013155844800.json
423,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.UriTemplates.sbom-20231024155652770.json
424,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Corvus.UriTemplates.sbom-20231026155117317.json
425,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Claims.sbom-20230925152701828.json
426,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Claims.sbom-20231002161804330.json
427,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Claims.sbom-20231002164058654.json
428,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Operations.sbom-20230925121312215.json
429,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Operations.sbom-20230925121354442.json
430,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Operations.sbom-20230927022336918.json
431,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Tenancy.sbom-20230922163414724.json
432,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Tenancy.sbom-20230925022435177.json
433,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Tenancy.sbom-20230925024911502.json
434,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.TenantManagement.sbom-20230926083515409.json
435,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.TenantManagement.sbom-20230927021739482.json
436,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.TenantManagement.sbom-20230927082242823.json
437,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.UserNotifications.sbom-20230313115752967.json
438,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.UserNotifications.sbom-20230313122434134.json
439,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.UserNotifications.sbom-20230714140818507.json
440,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Workflow.sbom-20230913024351535.json
441,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Workflow.sbom-20231018030131154.json
442,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Marain.Workflow.sbom-20231020021055256.json
443,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Menes.sbom-20230927023952519.json
444,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Menes.sbom-20230927081724280.json
445,pkg:nuget/System.Net.Http@4.1.0,CVE-2018-8292,.NET Core Information Disclosure,"An information disclosure vulnerability exists in .NET Core when authentication information is inadvertently exposed in a redirect, aka "".NET Core Information Disclosure Vulnerability."" This affects .NET Core 2.1, .NET Core 1.0, .NET Core 1.1, PowerShell Core 6.0.",CWE-200,CVE-2018-8292,HIGH,CVE-2018-8292,0.025470000,0.890510000,2023-11-22,System.Net.Http,Menes.sbom-20231019081033177.json
446,pkg:nuget/System.Security.Cryptography.X509Certificates@4.1.0,CVE-2017-11770,Improper Certificate Validation,".NET Core 1.0, 1.1, and 2.0 allow an unauthenticated attacker to remotely cause a denial of service attack against a .NET Core web application by improperly parsing certificate data. A denial of service vulnerability exists when .NET Core improperly handles parsing certificate data, aka "".NET CORE Denial Of Service Vulnerability"".",CWE-295,CVE-2017-11770,HIGH,CVE-2017-11770,0.026060000,0.891660000,2023-11-22,,
447,pkg:nuget/Azure.Identity@1.8.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Corvus.Leasing.sbom-20231018133339741.json
448,pkg:nuget/Azure.Identity@1.8.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Corvus.Leasing.sbom-20231018133701514.json
449,pkg:nuget/Azure.Identity@1.8.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Claims.sbom-20230925152701828.json
450,pkg:nuget/Azure.Identity@1.8.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Claims.sbom-20231002161804330.json
451,pkg:nuget/Azure.Identity@1.8.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Claims.sbom-20231002164058654.json
452,pkg:nuget/Azure.Identity@1.8.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Operations.sbom-20230925121312215.json
453,pkg:nuget/Azure.Identity@1.8.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Operations.sbom-20230925121354442.json
454,pkg:nuget/Azure.Identity@1.8.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Operations.sbom-20230927022336918.json
455,pkg:nuget/Azure.Identity@1.8.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Tenancy.sbom-20230922163414724.json
456,pkg:nuget/Azure.Identity@1.8.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Tenancy.sbom-20230925022435177.json
457,pkg:nuget/Azure.Identity@1.8.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Tenancy.sbom-20230925024911502.json
458,pkg:nuget/Azure.Identity@1.8.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.TenantManagement.sbom-20230926083515409.json
459,pkg:nuget/Azure.Identity@1.8.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.TenantManagement.sbom-20230927021739482.json
460,pkg:nuget/Azure.Identity@1.8.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.TenantManagement.sbom-20230927082242823.json
461,pkg:nuget/Azure.Identity@1.8.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.UserNotifications.sbom-20230313115752967.json
462,pkg:nuget/Azure.Identity@1.8.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.UserNotifications.sbom-20230313122434134.json
463,pkg:nuget/Azure.Identity@1.8.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.UserNotifications.sbom-20230714140818507.json
464,pkg:nuget/Azure.Identity@1.8.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Workflow.sbom-20230913024351535.json
465,pkg:nuget/Azure.Identity@1.8.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Workflow.sbom-20231018030131154.json
466,pkg:nuget/Azure.Identity@1.8.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Workflow.sbom-20231020021055256.json
467,pkg:nuget/Microsoft.AspNetCore.Server.IIS@2.2.0,CVE-2019-1075,Open redirect in ASP.NET Core,"A spoofing vulnerability exists in ASP.NET Core that could lead to an open redirect, aka 'ASP.NET Core Spoofing Vulnerability'.",CWE-601,CVE-2019-1075,MODERATE,CVE-2019-1075,0.001980000,0.575260000,2023-11-22,Microsoft.AspNetCore.Server.IIS,Marain.Claims.sbom-20230925152701828.json
468,pkg:nuget/Microsoft.AspNetCore.Server.IIS@2.2.0,CVE-2019-1075,Open redirect in ASP.NET Core,"A spoofing vulnerability exists in ASP.NET Core that could lead to an open redirect, aka 'ASP.NET Core Spoofing Vulnerability'.",CWE-601,CVE-2019-1075,MODERATE,CVE-2019-1075,0.001980000,0.575260000,2023-11-22,Microsoft.AspNetCore.Server.IIS,Marain.Claims.sbom-20231002161804330.json
469,pkg:nuget/Microsoft.AspNetCore.Server.IIS@2.2.0,CVE-2019-1075,Open redirect in ASP.NET Core,"A spoofing vulnerability exists in ASP.NET Core that could lead to an open redirect, aka 'ASP.NET Core Spoofing Vulnerability'.",CWE-601,CVE-2019-1075,MODERATE,CVE-2019-1075,0.001980000,0.575260000,2023-11-22,Microsoft.AspNetCore.Server.IIS,Marain.Claims.sbom-20231002164058654.json
470,pkg:nuget/Microsoft.AspNetCore.Server.IIS@2.2.0,CVE-2019-1075,Open redirect in ASP.NET Core,"A spoofing vulnerability exists in ASP.NET Core that could lead to an open redirect, aka 'ASP.NET Core Spoofing Vulnerability'.",CWE-601,CVE-2019-1075,MODERATE,CVE-2019-1075,0.001980000,0.575260000,2023-11-22,Microsoft.AspNetCore.Server.IIS,Marain.Tenancy.sbom-20230922163414724.json
471,pkg:nuget/Microsoft.AspNetCore.Server.IIS@2.2.0,CVE-2019-1075,Open redirect in ASP.NET Core,"A spoofing vulnerability exists in ASP.NET Core that could lead to an open redirect, aka 'ASP.NET Core Spoofing Vulnerability'.",CWE-601,CVE-2019-1075,MODERATE,CVE-2019-1075,0.001980000,0.575260000,2023-11-22,Microsoft.AspNetCore.Server.IIS,Marain.Tenancy.sbom-20230925022435177.json
472,pkg:nuget/Microsoft.AspNetCore.Server.IIS@2.2.0,CVE-2019-1075,Open redirect in ASP.NET Core,"A spoofing vulnerability exists in ASP.NET Core that could lead to an open redirect, aka 'ASP.NET Core Spoofing Vulnerability'.",CWE-601,CVE-2019-1075,MODERATE,CVE-2019-1075,0.001980000,0.575260000,2023-11-22,Microsoft.AspNetCore.Server.IIS,Marain.Tenancy.sbom-20230925024911502.json
473,pkg:nuget/Microsoft.AspNetCore.Server.IIS@2.2.0,CVE-2019-1075,Open redirect in ASP.NET Core,"A spoofing vulnerability exists in ASP.NET Core that could lead to an open redirect, aka 'ASP.NET Core Spoofing Vulnerability'.",CWE-601,CVE-2019-1075,MODERATE,CVE-2019-1075,0.001980000,0.575260000,2023-11-22,Microsoft.AspNetCore.Server.IIS,Menes.sbom-20230927023952519.json
474,pkg:nuget/Microsoft.AspNetCore.Server.IIS@2.2.0,CVE-2019-1075,Open redirect in ASP.NET Core,"A spoofing vulnerability exists in ASP.NET Core that could lead to an open redirect, aka 'ASP.NET Core Spoofing Vulnerability'.",CWE-601,CVE-2019-1075,MODERATE,CVE-2019-1075,0.001980000,0.575260000,2023-11-22,Microsoft.AspNetCore.Server.IIS,Menes.sbom-20230927081724280.json
475,pkg:nuget/Microsoft.AspNetCore.Server.IIS@2.2.0,CVE-2019-1075,Open redirect in ASP.NET Core,"A spoofing vulnerability exists in ASP.NET Core that could lead to an open redirect, aka 'ASP.NET Core Spoofing Vulnerability'.",CWE-601,CVE-2019-1075,MODERATE,CVE-2019-1075,0.001980000,0.575260000,2023-11-22,Microsoft.AspNetCore.Server.IIS,Menes.sbom-20231019081033177.json
476,pkg:nuget/Azure.Identity@1.6.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Corvus.Leasing.sbom-20231018133339741.json
477,pkg:nuget/Azure.Identity@1.6.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Corvus.Leasing.sbom-20231018133701514.json
478,pkg:nuget/Azure.Identity@1.6.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Claims.sbom-20230925152701828.json
479,pkg:nuget/Azure.Identity@1.6.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Claims.sbom-20231002161804330.json
480,pkg:nuget/Azure.Identity@1.6.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Claims.sbom-20231002164058654.json
481,pkg:nuget/Azure.Identity@1.6.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Operations.sbom-20230925121312215.json
482,pkg:nuget/Azure.Identity@1.6.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Operations.sbom-20230925121354442.json
483,pkg:nuget/Azure.Identity@1.6.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Operations.sbom-20230927022336918.json
484,pkg:nuget/Azure.Identity@1.6.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Tenancy.sbom-20230922163414724.json
485,pkg:nuget/Azure.Identity@1.6.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Tenancy.sbom-20230925022435177.json
486,pkg:nuget/Azure.Identity@1.6.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Tenancy.sbom-20230925024911502.json
487,pkg:nuget/Azure.Identity@1.6.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.TenantManagement.sbom-20230926083515409.json
488,pkg:nuget/Azure.Identity@1.6.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.TenantManagement.sbom-20230927021739482.json
489,pkg:nuget/Azure.Identity@1.6.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.TenantManagement.sbom-20230927082242823.json
490,pkg:nuget/Azure.Identity@1.6.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.UserNotifications.sbom-20230313115752967.json
491,pkg:nuget/Azure.Identity@1.6.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.UserNotifications.sbom-20230313122434134.json
492,pkg:nuget/Azure.Identity@1.6.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.UserNotifications.sbom-20230714140818507.json
493,pkg:nuget/Azure.Identity@1.6.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Workflow.sbom-20230913024351535.json
494,pkg:nuget/Azure.Identity@1.6.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Workflow.sbom-20231018030131154.json
495,pkg:nuget/Azure.Identity@1.6.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Workflow.sbom-20231020021055256.json
496,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.AzureFunctionsKeepAlive.sbom-20230731145443527.json
497,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.AzureFunctionsKeepAlive.sbom-20230925023013487.json
498,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.AzureFunctionsKeepAlive.sbom-20230926005207504.json
499,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.ContentHandling.sbom-20230803021854521.json
500,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.ContentHandling.sbom-20230927021312061.json
501,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.ContentHandling.sbom-20230927022958777.json
502,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.System.Text.Json.sbom-20230714141727393.json
503,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.System.Text.Json.sbom-20230731141202223.json
504,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.System.Text.Json.sbom-20230807133651423.json
505,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.sbom-20230925124952113.json
506,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.sbom-20230925125539544.json
507,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Extensions.sbom-20230927021217870.json
508,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Globbing.sbom-20230925021641016.json
509,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Globbing.sbom-20230927021755450.json
510,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Globbing.sbom-20230927022310790.json
511,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Json.sbom-20230802021609249.json
512,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Json.sbom-20230803021801566.json
513,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Json.sbom-20230925021331846.json
514,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.JsonSchema.sbom-20231018071822430.json
515,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.JsonSchema.sbom-20231024080024899.json
516,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.JsonSchema.sbom-20231025075047582.json
517,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Leasing.sbom-20231007124310090.json
518,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Leasing.sbom-20231018133339741.json
519,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Leasing.sbom-20231018133701514.json
520,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Monitoring.sbom-20230925021343358.json
521,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Monitoring.sbom-20230927021528451.json
522,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Monitoring.sbom-20230927021709610.json
523,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Retry.sbom-20230802021549215.json
524,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Retry.sbom-20230925125954595.json
525,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.Retry.sbom-20230925130521136.json
526,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.UriTemplates.sbom-20231013155844800.json
527,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.UriTemplates.sbom-20231024155652770.json
528,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Corvus.UriTemplates.sbom-20231026155117317.json
529,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Claims.sbom-20230925152701828.json
530,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Claims.sbom-20231002161804330.json
531,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Claims.sbom-20231002164058654.json
532,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Operations.sbom-20230925121312215.json
533,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Operations.sbom-20230925121354442.json
534,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Operations.sbom-20230927022336918.json
535,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Tenancy.sbom-20230922163414724.json
536,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Tenancy.sbom-20230925022435177.json
537,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Tenancy.sbom-20230925024911502.json
538,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.TenantManagement.sbom-20230926083515409.json
539,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.TenantManagement.sbom-20230927021739482.json
540,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.TenantManagement.sbom-20230927082242823.json
541,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.UserNotifications.sbom-20230313115752967.json
542,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.UserNotifications.sbom-20230313122434134.json
543,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.UserNotifications.sbom-20230714140818507.json
544,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Workflow.sbom-20230913024351535.json
545,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Workflow.sbom-20231018030131154.json
546,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Marain.Workflow.sbom-20231020021055256.json
547,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Menes.sbom-20230927023952519.json
548,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Menes.sbom-20230927081724280.json
549,pkg:nuget/Newtonsoft.Json@10.0.3,CWE-755,Improper Handling of Exceptional Conditions in Newtonsoft.Json,"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). 

The serialization and deserialization path have different properties regarding the issue.

Deserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.

Serializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.

To mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:

``` 
JsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };
```

Repro code:
```
//Create a string representation of an highly nested object (JSON serialized)
int nRep = 25000;
string json = string.Concat(Enumerable.Repeat(""{a:"", nRep)) + ""1"" +
 string.Concat(Enumerable.Repeat(""}"", nRep));

//Parse this object (leads to high CPU/RAM consumption)
var parsedJson = JsonConvert.DeserializeObject(json);

// Methods below all throw stack overflow with nRep around 20k and higher
// string a = parsedJson.ToString();
// string b = JsonConvert.SerializeObject(parsedJson);
```

### Additional affected product and version information
**The original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.**",CWE-755,,HIGH,,,,,Newtonsoft.Json,Menes.sbom-20231019081033177.json
550,pkg:nuget/Azure.Identity@1.7.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Corvus.Leasing.sbom-20231018133339741.json
551,pkg:nuget/Azure.Identity@1.7.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Corvus.Leasing.sbom-20231018133701514.json
552,pkg:nuget/Azure.Identity@1.7.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Claims.sbom-20230925152701828.json
553,pkg:nuget/Azure.Identity@1.7.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Claims.sbom-20231002161804330.json
554,pkg:nuget/Azure.Identity@1.7.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Claims.sbom-20231002164058654.json
555,pkg:nuget/Azure.Identity@1.7.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Operations.sbom-20230925121312215.json
556,pkg:nuget/Azure.Identity@1.7.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Operations.sbom-20230925121354442.json
557,pkg:nuget/Azure.Identity@1.7.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Operations.sbom-20230927022336918.json
558,pkg:nuget/Azure.Identity@1.7.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Tenancy.sbom-20230922163414724.json
559,pkg:nuget/Azure.Identity@1.7.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Tenancy.sbom-20230925022435177.json
560,pkg:nuget/Azure.Identity@1.7.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Tenancy.sbom-20230925024911502.json
561,pkg:nuget/Azure.Identity@1.7.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.TenantManagement.sbom-20230926083515409.json
562,pkg:nuget/Azure.Identity@1.7.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.TenantManagement.sbom-20230927021739482.json
563,pkg:nuget/Azure.Identity@1.7.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.TenantManagement.sbom-20230927082242823.json
564,pkg:nuget/Azure.Identity@1.7.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.UserNotifications.sbom-20230313115752967.json
565,pkg:nuget/Azure.Identity@1.7.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.UserNotifications.sbom-20230313122434134.json
566,pkg:nuget/Azure.Identity@1.7.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.UserNotifications.sbom-20230714140818507.json
567,pkg:nuget/Azure.Identity@1.7.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Workflow.sbom-20230913024351535.json
568,pkg:nuget/Azure.Identity@1.7.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Workflow.sbom-20231018030131154.json
569,pkg:nuget/Azure.Identity@1.7.0,CVE-2023-36414,Azure Identity SDK Remote Code Execution Vulnerability,Azure Identity SDK is vulnerable to remote code execution.,,CVE-2023-36414,HIGH,CVE-2023-36414,0.001890000,0.563620000,2023-11-22,Azure.Identity,Marain.Workflow.sbom-20231020021055256.json
